<?xml version="1.0" encoding="UTF-8"?>
<!-- - Application context definition for PetClinic on JDBC. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd  
    http://www.springframework.org/schema/jdbc  
    http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd  
    http://www.springframework.org/schema/cache  
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd  
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/data/jpa
    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
    http://www.springframework.org/schema/jee
    http://www.springframework.org/schema/jee/spring-jee-3.2.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->


	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
	</bean>
	<bean id="appProperty"
		class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="properties" ref="propertyConfigurer" />
	</bean>
	
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="cacheSeconds" value="10"></property>
		<property name="basenames">
			<list>
				<value>classpath:systemset</value>
				<value>classpath:config</value>
			</list>
		</property>
	</bean>


	<!-- ###########################################JTA 配置开始########################################### -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="false" />
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300" />
	</bean>


	<bean id="transactionManagerJTA"
		class="org.springframework.transaction.jta.JtaTransactionManager"
		depends-on="atomikosTransactionManager,atomikosUserTransaction">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
		<property name="allowCustomIsolationLevels" value="true" />
		<qualifier value="defaultJTATransactionManager"></qualifier>
	</bean>


	<!-- *************************************JTA 配置结束************************************* -->

	<!-- ###########################################缓存配置开始，这里使用的是Ecache,可以使用其他的cache########################################### -->

	<!-- ehcache缓存配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

	<!-- cacheManager -->
	<bean id="ehCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcahce.xml" />
		<property name="cacheManagerName" value="sampleCache1" />
		<property name="shared" value="true" />
	</bean>

	<!-- *************************************缓存配置结束************************************* -->


	<!-- ###########################################共用配置开始 ########################################### -->

	<!-- 数据源的共用配置，方便下面直接继承 -->
	<bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close" abstract="true">
		<property name="poolSize" value="10" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
		<property name="borrowConnectionTimeout" value="60" />  <!--获取连接失败重新获等待最大时间，在这个时间内如果有可用连接，将返回 -->
		<property name="reapTimeout" value="20" /> <!--最大获取数据时间，如果不设置这个值，Atomikos使用默认的5分钟，那么在处理大批量数据读取的时候，一旦超过5分钟，就会抛出类似 Resultset 
			is close 的错误. -->
		<property name="maxIdleTime" value="60" />    <!--最大闲置时间，超过最小连接池连接的连接将将关闭 -->
		<property name="maintenanceInterval" value="60" />  <!--连接回收时间 -->
		<property name="loginTimeout" value="60" />     <!--java数据库连接池，最大可等待获取datasouce的时间 -->
		<property name="logWriter" value="60" />
		<property name="testQuery">
			<value>select 1</value>
		</property>
	</bean>

	<!-- JPA的共用配置，方便下面直接继承,JPA还是有很多易用的地方 这里 JPA 也配着用 -->
	<bean id="myAtomikosJtaPlatfom" class="orderservice.server.core.jta.AtomikosJtaPlatfom"
		depends-on="transactionManagerJTA">
		<property name="ransactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
	</bean>
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<value>${dialect.MySQL5}</value>
		</property>
		<property name="showSql">
			<value>true</value>
		</property>
		<property name="generateDdl">
			<value>true</value>
		</property>
	</bean>
	<bean id="abstactEntityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		abstract="true">
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="persistenceUnitName" value="mysqlPU" />
		<property name="jpaProperties">
			<props>
				<prop key="javax.persistence.transactionType">JTA</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.originalText">replace</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.current_session_context_class">jta</prop>
				<prop key="hibernate.dialect">${dialect.MySQL5}</prop>
				<prop key="hibernate.connection.driver_class">${xa.datasource.mysql}</prop>
				<prop key="hibernate.auto_quote_keyword">true</prop>
				<prop key="hibernate.transaction.jta.platform">orderservice.server.core.jta.AtomikosJtaPlatfom
				</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
				</prop>
			</props>
		</property>
	</bean>


	<!-- HIBERNATE SessionFactory 共用配置 -->
	<bean id="abstractSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		abstract="true">
		<property name="jtaTransactionManager" ref="transactionManagerJTA"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.originalText">replace</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.transaction.factory_class">org.hibernate.tran‌​saction.JTATransacti‌​onFactory
				</prop>
				<!-- prop key="hibernate.transaction.factory_class">net.sf.hibernate.transaction.JTATransactionFactory</prop -->

				<prop key="hibernate.current_session_context_class">jta</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
				</prop>
			</props>
		</property>
	</bean>
	<!-- *************************************共用配置结束************************************* -->


	<!-- ###########################################默认数据源等相关配置开始########################################### -->

	<!-- 默认数据源 -->
	<bean id="defaultDataSource" parent="abstractXADataSource">
		<property name="uniqueResourceName" value="XA1DBMS" />
		<property name="xaDataSourceClassName" value="${xa.datasource.mysql}" />
		<property name="xaProperties">
			<props>
				<prop key="pinGlobalTxToPhysicalConnection">true</prop>
				<prop key="URL">${jdbc.url}</prop>
				<prop key="user">${jdbc.username}</prop>
				<prop key="password">${jdbc.password}</prop>
			</props>
		</property>
		<property name="poolSize" value="10" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
	</bean>

	<!-- 默认JPA管理工厂 -->
	<bean id="defaultEntityManager" parent="abstactEntityManagerFactory">
		<property name="dataSource" ref="defaultDataSource" />
		<property name="packagesToScan" value="orderservice.server.core.po" /><!-- 
			修改成实际使用的ENTITY包 -->
	</bean>

	<!-- 默认的JPA工厂注入 -->
	<!-- base-package 修改成实际使用的包 , repository-impl-postfix,query-lookup-strategy 
		是默认值 -->
	<jpa:repositories base-package="orderservice.server.service.app.sample.dba"
		repository-impl-postfix="Impl" query-lookup-strategy="create-if-not-found"
		entity-manager-factory-ref="defaultEntityManager"
		transaction-manager-ref="transactionManagerJTA">
	</jpa:repositories>

	<!-- 默认的 SessionFactory -->
	<bean id="defaultSessionFactory" parent="abstractSessionFactory">
		<property name="dataSource" ref="defaultDataSource" />
		<property name="packagesToScan">
			<list>
				<value>orderservice.server.core.po</value><!-- 修改成实际使用的ENTITY包 -->
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${dialect.MySQL5}</prop>
			</props>
		</property>
	</bean>

	<!-- *************************************默认数据源等相关配置结束************************************* -->



	<!-- ###########################################其他数据源等相关配置开始,如果只有一个数据源，可以注释########################################### -->
	<!-- 留着备用 -->
	<!-- 数据源 -->
	<bean id="secondDataSource" parent="abstractXADataSource">
		<property name="uniqueResourceName" value="XA2DBMS" />
		<property name="xaDataSourceClassName" value="${xa.datasource.mysql}" />
		<property name="xaProperties">
			<props>
				<prop key="pinGlobalTxToPhysicalConnection">true</prop>
				<prop key="URL">${jdbc.url2}</prop>
				<prop key="user">${jdbc.username}</prop>
				<prop key="password">${jdbc.password}</prop>
			</props>
		</property>
		<property name="poolSize" value="10" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
	</bean>

	<!-- JPA管理工厂 -->
	<!-- packagesToScan 修改成实际使用的ENTITY包 -->
	<bean id="secondEntityManager" parent="abstactEntityManagerFactory">
		<property name="dataSource" ref="secondDataSource" />
		<property name="packagesToScan" value="orderservice.server.core.po2" />
	</bean>

	<!-- JPA工厂注入 -->
	<!-- base-package 修改成实际使用的包 -->
	<jpa:repositories base-package="orderservice.server.service.app.sample.dbb"
		entity-manager-factory-ref="secondEntityManager"
		transaction-manager-ref="transactionManagerJTA">
	</jpa:repositories>


	<!-- annotatedClasses修改成实际使用的ENTITY包 -->
	<bean id="secondSessionFactory" parent="abstractSessionFactory">
		<property name="dataSource" ref="secondDataSource" />
		<property name="packagesToScan">
			<list>
				<value>orderservice.server.core.po2</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${dialect.MySQL5}</prop>
			</props>
		</property>
	</bean>

	<!-- *************************************默认数据源等相关配置结束************************************* -->


	<!-- ###########################################事务等其他相关配置开始########################################### -->

	<!-- 注解事务配置 -->
	<context:annotation-config />
	<tx:annotation-driven transaction-manager="transactionManagerJTA" />
	<!-- 扫描包 -->
	<context:component-scan base-package="orderservice.server.service.app.sample"></context:component-scan>


	<!-- 事务传播性拦截器，这里统一配置传播性，不用每个Transaction 注解配置 -->
	<bean id="txInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManagerJTA" />
		<property name="transactionAttributes">
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED,+NotRollBackException,-Exception
				</prop>
				<prop key="add*">PROPAGATION_REQUIRED,+NotRollBackException,-Exception
				</prop>
				<prop key="update*">PROPAGATION_REQUIRED,+NotRollBackException,-Exception
				</prop>
				<prop key="save*">PROPAGATION_REQUIRED,+NotRollBackException,-Exception
				</prop>
				<prop key="saveOrUpdate*">PROPAGATION_REQUIRED,+NotRollBackException,-Exception
				</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,+NotRollBackException,-Exception
				</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly,+NotRollBackException,-Exception
				</prop>
				<prop key="search*">PROPAGATION_REQUIRED,readOnly,+NotRollBackException,-Exception
				</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly,+NotRollBackException,-Exception
				</prop>
			</props>
		</property>
	</bean>
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>txInterceptor</value>
			</list>
		</property>
	</bean>
	<!-- *************************************事务等其他相关配置结束************************************* -->
</beans>